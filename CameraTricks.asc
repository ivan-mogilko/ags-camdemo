// Max number of simultaneously moving objects (viewports + cameras)
// 10 is a fine number; increase if you suddenly need more.
#define MAX_MOVETARGETS 10

// MoveTarget struct describes a moving task actually,
// either a viewport or a camera may be moved by a single task.
struct MoveTarget
{
	bool IsViewport;    // is viewport or camera
	int Obj;            // index of a viewport or camera
	int SX, SY, SW, SH; // starting x,y,width,height
	int EX, EY, EW, EH; // ending x,y,width,height
	float FullTime;     // time to perform a move, in seconds
	float CurTime;      // current time progress
};

// ViewFollowCamAR struct sets up a Viewport keeping
// aspect ratio of its camera's image.
struct ViewFollowCamAR
{
	int View;			// viewport's index
	int bx, by, bw, bh;	// bounding rectangle to stay in
};

// CamFollowChar struct sets up a Camera following
// certain character.
struct CamFollowChar
{
	int Cam;
	Character* C;
};

// Array of the move targets (tasks)
MoveTarget MT[MAX_MOVETARGETS];
// Array of the tasks for viewport keeping camera's aspect ratio
ViewFollowCamAR ViewAR[MAX_MOVETARGETS];
// Array of the tasks for cameras following characters
CamFollowChar Follow[MAX_MOVETARGETS];
// How many seconds there are in a game tick
float SecondsPerTick;


// Finds a free move target slot, returns -1 if no free slots remain
int FindFreeMT()
{
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		if (MT[i].Obj < 0) {
			return i;
		}
	}
	return -1;
}

// Finds a free viewport aspect ratio task slot, returns -1 if no free slots remain
int FindFreeViewAR()
{
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		if (ViewAR[i].View < 0) {
			return i;
		}
	}
	return -1;
}

// Finds a free camera follow task slot, returns -1 if no free slots remain
int FindFreeFollow()
{
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		if (Follow[i].Cam < 0) {
			return i;
		}
	}
	return -1;
}


// Tells if the given move is completed.
static bool CameraTricks::IsDone(int id)
{
	return id < 0 || id >= MAX_MOVETARGETS || MT[id].Obj < 0 ||
		MT[id].CurTime >= (MT[id].FullTime - TINY_FLOAT) && MT[id].CurTime >= (MT[id].FullTime - TINY_FLOAT);
}

// Advances a single move target (task) by the dt seconds
bool UpdateMoveTarget(int id, float dt)
{
	if (MT[id].Obj < 0) {
		return false;
	}
	
	int dx = MT[id].EX - MT[id].SX;
	int dy = MT[id].EY - MT[id].SY;
	int dw = MT[id].EW - MT[id].SW;
	int dh = MT[id].EH - MT[id].SH;
	MT[id].CurTime += dt;
	float f = MT[id].CurTime / MT[id].FullTime;
	if (f > 1.0) {
		f = 1.0; // don't let it go over 100%
	}
	
	if (MT[id].IsViewport) {
		Viewport* view = Screen.Viewports[MT[id].Obj];
		view.X = MT[id].SX + FloatToInt(IntToFloat(dx) * f, eRoundNearest);
		view.Y = MT[id].SY + FloatToInt(IntToFloat(dy) * f, eRoundNearest);
		view.Width = MT[id].SW + FloatToInt(IntToFloat(dw) * f, eRoundNearest);
		view.Height = MT[id].SH + FloatToInt(IntToFloat(dh) * f, eRoundNearest);
	} else {
		Camera* cam = Game.Cameras[MT[id].Obj];
		cam.X = MT[id].SX + FloatToInt(IntToFloat(dx) * f, eRoundNearest);
		cam.Y = MT[id].SY + FloatToInt(IntToFloat(dy) * f, eRoundNearest);
		cam.Width = MT[id].SW + FloatToInt(IntToFloat(dw) * f, eRoundNearest);
		cam.Height = MT[id].SH + FloatToInt(IntToFloat(dh) * f, eRoundNearest);
	}
	
	if (MT[id].CurTime >= (MT[id].FullTime - TINY_FLOAT)) {
		MT[id].Obj = -1;
		return false;
	}
	return true;
}

// Updates a camera following character
void UpdateFollow(int id)
{
	if (Follow[id].Cam < 0) {
		return;
	}
	
	Camera* cam = Game.Cameras[Follow[id].Cam];
	Character* c = Follow[id].C;
	if (cam.X != c.x - cam.Width / 2) {
		cam.X = c.x - cam.Width / 2;
	}
}

// Updates a viewport keeping aspect ratio of its camera's image
void UpdateViewAR(int id)
{
	if (ViewAR[id].View < 0) {
		return;
	}
	
	Viewport* view = Screen.Viewports[ViewAR[id].View];
	Camera* cam = view.Camera;
	if (cam == null) {
		return;
	}

	int view_w = cam.Width;
	int view_h = cam.Height;
	if (view_w > ViewAR[id].bw) {
		view_w = ViewAR[id].bw;
		float aspect_ratio = IntToFloat(cam.Height) / IntToFloat(cam.Width);
		view_h = FloatToInt(IntToFloat(view_w) * aspect_ratio, eRoundNearest);
	}
	
	int view_x = ViewAR[id].bx + (ViewAR[id].bw - view_w) / 2;
	int view_y = ViewAR[id].by + (ViewAR[id].bh - view_h) / 2;
	
	view.X = view_x;
	view.Y = view_y;
	view.Width = view_w;
	view.Height = view_h;
}


// Moves and resizes camera to the certain position over number of seconds.
static int CameraTricks::MoveAndScaleCamera(int cam_id, int cam_x, int cam_y, int cam_w, int cam_h, float seconds, BlockingStyle block)
{
	int id = FindFreeMT();
	if (id < 0) {
		return -1;
	}

	MT[id].Obj = cam_id;
	MT[id].IsViewport = false;
	Camera* cam = Game.Cameras[cam_id];
	MT[id].SX = cam.X;
	MT[id].SY = cam.Y;
	MT[id].SW = cam.Width;
	MT[id].SH = cam.Height;
	MT[id].EX = cam_x;
	MT[id].EY = cam_y;
	MT[id].EW = cam_w;
	MT[id].EH = cam_h;
	MT[id].FullTime = seconds;
	MT[id].CurTime = 0.0;

	if (block == eNoBlock) {
		return id;
	}

	while (!CameraTricks.IsDone(id)) {
		Wait(1);
	}
	return -1;
}

// Moves camera to the certain position over number of seconds.
static int CameraTricks::MoveCamera(int cam_id, int cam_x, int cam_y, float seconds, BlockingStyle block)
{
	return CameraTricks.MoveAndScaleCamera(cam_id, cam_x, cam_y, Game.Cameras[cam_id].Width, Game.Cameras[cam_id].Height, seconds, block);
}

// Moves and resizes viewport to the certain position over number of seconds.
static int CameraTricks::MoveAndScaleViewport(int view_id, int view_x, int view_y, int view_w, int view_h, float seconds, BlockingStyle block)
{
	int id = FindFreeMT();
	if (id < 0) {
		return -1;
	}

	MT[id].Obj = view_id;
	MT[id].IsViewport = true;
	Viewport* view = Screen.Viewports[view_id];
	MT[id].SX = view.X;
	MT[id].SY = view.Y;
	MT[id].SW = view.Width;
	MT[id].SH = view.Height;
	MT[id].EX = view_x;
	MT[id].EY = view_y;
	MT[id].EW = view_w;
	MT[id].EH = view_h;
	MT[id].FullTime = seconds;
	MT[id].CurTime = 0.0;

	if (block == eNoBlock) {
		return id;
	}

	while (!CameraTricks.IsDone(id)) {
		Wait(1);
	}
	return -1;
}

// Moves viewport to the certain position over number of seconds.
static int CameraTricks::MoveViewport(int view_id, int view_x, int view_y, float seconds, BlockingStyle block)
{
	return CameraTricks.MoveAndScaleViewport(view_id, view_x, view_y, Screen.Viewports[view_id].Width, Screen.Viewports[view_id].Height, seconds, block);
}

// Moves and resizes a camera and a viewport to the certain position over number of seconds simultaneously.
static int CameraTricks::MoveAndScaleBoth(int cam_id, int cam_x, int cam_y, int cam_w, int cam_h,
				int view_id, int view_x, int view_y, int view_w, int view_h, float seconds, BlockingStyle block)
{
	int mt_cam = CameraTricks.MoveAndScaleCamera(cam_id, cam_x, cam_y, cam_w, cam_h, seconds, eNoBlock);
	int mt_view = CameraTricks.MoveAndScaleViewport(view_id, view_x, view_y, view_w, view_h, seconds, eNoBlock);

	if (block == eNoBlock) {
		return mt_cam;
	}
	
	while (!CameraTricks.IsDone(mt_cam) || !CameraTricks.IsDone(mt_view)) {
		Wait(1);
	}
	return -1;
}

/* Makes a viewport keep same aspect ratio of the camera's image at all times.
 * This means that if camera's size change, then the viewport also resizes itself
 * trying to keep image proportions same. Bound_ parameters specify the borders
 * which this viewport must not exceed. */
static void CameraTricks::FollowAspectRatio(int view_id, int bound_x, int bound_y, int bound_w, int bound_h)
{
	int ar = FindFreeViewAR();
	if (ar < 0) {
		return;
	}
	
	ViewAR[ar].View = view_id;
	ViewAR[ar].bx = bound_x;
	ViewAR[ar].by = bound_y;
	ViewAR[ar].bw = bound_w;
	ViewAR[ar].bh = bound_h;
}

// Disables auto-keeping aspect ratio for this viewport.
static void CameraTricks::UnfollowAspectRatio(int view_id)
{
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		if (ViewAR[i].View == view_id) {
			ViewAR[i].View = -1;
			return;
		}
	}
}

// Make this camera to specifically follow character's X coordinate, while retaining its own Y.
static void CameraTricks::FollowCharX(int cam_id, Character* c)
{
	int fol = FindFreeFollow();
	if (fol < 0) {
		return;
	}

	Follow[fol].Cam = cam_id;
	Follow[fol].C = c;
}

// Make this camera to no longer follow any character.
static void CameraTricks::UnfollowChar(int cam_id)
{
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		if (Follow[i].Cam == cam_id) {
			Follow[i].Cam = -1;
			return;
		}
	}
}


function game_start()
{
	// Reset all the task slots
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		MT[i].Obj = -1;
	}
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		ViewAR[i].View = -1;
	}
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		Follow[i].Cam = -1;
	}
}

function late_repeatedly_execute_always()
{
	if (IsGamePaused()) {
		return;
	}
	// Update all the active tasks
	SecondsPerTick = 1.0 / IntToFloat(GetGameSpeed());
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		UpdateMoveTarget(i, SecondsPerTick);
	}
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		UpdateFollow(i);
	}
	for (int i = 0; i < MAX_MOVETARGETS; i++) {
		UpdateViewAR(i);
	}
}
