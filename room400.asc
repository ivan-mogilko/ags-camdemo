#define DRAGDROP_MIRROR_MODE 1

Camera* LookCam;
Viewport* LookView;
#define CAM_WIDTH 234
#define CAM_HEIGHT 388
int MirrorView_OffsetX, MirrorView_OffsetY;
int Camera2_OffsetX, Camera2_OffsetY;
#define SPRITE_MIRRORMASK 3
DynamicSprite* MirrorMask;
DrawingSurface* MirrorMaskDS;


// TODO: replace with inventory items!
struct QuestS
{
	bool TakenKey;
	bool OpenedDoor;
	bool InRoom2;
};
QuestS Quest;


void UpdateMirrorViewport()
{
	int x = gMagicMirror.X + MirrorView_OffsetX;
	int y = gMagicMirror.Y + MirrorView_OffsetY;
	LookView.X = x;
	LookView.Y = y;
	LookCam.X = x + Camera2_OffsetX;
	LookCam.Y = y + Camera2_OffsetY;
}

void SetCameraLocation()
{
	if (Quest.InRoom2) {
		Game.Camera.SetAt(0, Screen.Height);
		Camera2_OffsetX = 0;
		Camera2_OffsetY = 0;
	} else {
		Game.Camera.SetAt(0, 0);
		Camera2_OffsetX = 0;
		Camera2_OffsetY = Screen.Height;
	}
	UpdateMirrorViewport();
}

void UpdateMirrorDrag()
{
	Point *p = Utils.ClampPosition(DragDrop.ObjectX, DragDrop.ObjectY, gMagicMirror.Width, gMagicMirror.Height, 
		0, 0, Screen.Width, Screen.Height);
	gMagicMirror.X = p.x;
	gMagicMirror.Y = p.y;
	UpdateMirrorViewport();
}

void ToggleMirror(bool on)
{
	gMagicMirror.Visible = on;
	LookView.Visible = on;
	UpdateMirrorViewport();
}

function room_Load()
{
	MirrorMask = DynamicSprite.CreateFromExistingSprite(SPRITE_MIRRORMASK);
	MirrorMaskDS = MirrorMask.GetDrawingSurface();
	
	LookCam = Camera.Create();
	LookCam.SetSize(CAM_WIDTH, CAM_HEIGHT);
	LookCam.SetAt(0, Screen.Height);
	LookView = Viewport.Create();
	LookView.SetPosition(0, 0, CAM_WIDTH, CAM_HEIGHT);
	LookView.Visible = false;
	LookView.Camera = LookCam;
	gMagicMirror.X = (Screen.Width - gMagicMirror.Width) / 2;
	gMagicMirror.Y = (Screen.Height - gMagicMirror.Height) / 2;
	gMagicMirror.Visible = false;
	MirrorView_OffsetX = (gMagicMirror.Width - CAM_WIDTH) / 2;
	MirrorView_OffsetY = (gMagicMirror.Height - CAM_HEIGHT) / 2;
	SetCameraLocation();
	
	gMenuButton.Visible = true;
	gInventory.Visible = true;

	Utils.RestrictCursorsTo(eModePointer);

	DragDrop.Enabled = true;
}

function room_Leave()
{
	player.LoseInventory(i400Mirror);
	player.LoseInventory(i400Key);
	
	Utils.HideAllGUI();

	LookCam.Delete();
	LookView.Delete();
	MirrorMaskDS.Release();
	MirrorMask.Delete();
}

function room_AfterFadeIn()
{

}

function on_key_press(eKeyCode k)
{
	if (player.HasInventory(i400Mirror) && k == eKeySpace) {
		ToggleMirror(!gMagicMirror.Visible);
	}
}

function on_mouse_click(MouseButton btn)
{
	// Don't let player interact with the room through the mirror border.
	// We keep mirror GUI non-clickable, otherwise it prevents from interacting
	// with the viewport underneath it's translucent part.
	// But this also means that clicking on the mirror's border (GUI) will click
	// through, and we don't want that to happen.
	if (gMagicMirror.Visible) {
		bool clicked_on_solid_border = false;
		gMagicMirror.Clickable = true; // BECAUSE IT'S AGS!!!
		if (GUI.GetAtScreenXY(mouse.x, mouse.y) == gMagicMirror) {
			if (MirrorMaskDS.GetPixel(mouse.x - gMagicMirror.X, mouse.y - gMagicMirror.Y) == 0) {
				clicked_on_solid_border = true;
			}
		}
		gMagicMirror.Clickable = false;
		if (clicked_on_solid_border) {
			ClaimEvent();
			return;
		}
	}
}

function on_call(int value)
{
	if (value == ROOM_EVENT__ITEM_USED) {
		switch (inventory[game.inv_activated]) {
			case i400Mirror:
				ToggleMirror(!gMagicMirror.Visible);
				break;
			case i400Key:
				Display("You've got a key. Now to find a lock.");
				break;
		}
	}
}

function late_repeatedly_execute_always()
{
	if (IsGamePaused()) {
		return;
	}

	if (DragDrop.EvtWantObject) {
		if (gMagicMirror.Visible) {
			gMagicMirror.Clickable = true; // BECAUSE IT'S AGS!!!
			if (GUI.GetAtScreenXY(mouse.x, mouse.y) == gMagicMirror) {
				if (MirrorMaskDS.GetPixel(mouse.x - gMagicMirror.X, mouse.y - gMagicMirror.Y) == 0) {
					DragDrop.HookObject(DRAGDROP_MIRROR_MODE, gMagicMirror.X, gMagicMirror.Y);
				}
			}
			gMagicMirror.Clickable = false;
		}
	} else if (DragDrop.EvtDropped) {
		
	}
	else if (DragDrop.IsDragging) {
		UpdateMirrorDrag();
	}
}

function oChest_Interact()
{
	if (player.HasInventory(i400Mirror)) {
		Display("The chest is now empty.");
	} else {
		player.AddInventory(i400Mirror);
		oChest.Graphic = 8;
		Display("Inside the chest you find a magic mirror.\n\nInteract with it to see what it reveals. Then drag it around and investigate a parallel dimension!");
	}
}

function oKey_Interact()
{
	if (Quest.TakenKey) {
		Display("There's nothing of interest there.");
	} else {
		player.AddInventory(i400Key);
		Quest.TakenKey = true;
		oKey.Graphic = 11;
		Display("You pick up the key.");
	}
}

function oDoor1_Interact()
{
	if (Quest.OpenedDoor) {
		Display("The door is now open.");
	} else if (player.HasInventory(i400Key)) {
		player.LoseInventory(i400Key);
		Quest.OpenedDoor = true;
		oDoor1.SetView(VOPENEDDOOR, 0, 0);
		oDoor1.X = 190;
		oDoor1.Y = 1330;
		oPortal.Visible = true;
		Display("You unlocked the door. Or... is it more than just a door?");
	} else {
		Display("The door is locked and you don't have any keys.");
	}
}

function hPortal1_Interact()
{
	if (Quest.InRoom2) {
		Quest.InRoom2 = false;
		SetCameraLocation();
		Display("Woooosh!");
	} else {
		Display("You cannot travel through the mirror, you have to walk by yourself.");
	}
}

function oPortal_Interact()
{
	if (!Quest.InRoom2) {
		Quest.InRoom2 = true;
		SetCameraLocation();
		Display("Woooosh!");
	} else {
		Display("You cannot travel through the mirror, you have to walk by yourself.");
	}
}
