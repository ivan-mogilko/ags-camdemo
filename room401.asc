#define CAMERA_MIDDLE_Y 158
#define CAMERA1_DEFAULT_X 238
#define CAMERA2_DEFAULT_X 1680
#define SPLIT_VIEWPORT_MARGIN 8
Camera* Camera2;
Viewport* Viewport2;

struct QuestS
{
	//int TimesUsedPanel;
	//int TimesUsedPanel2;
	int TimesUsedPanel1;
	bool SecondCharacterIntro;
	bool BridgeEnabled;
	bool CharactersJoined;
	int Puzzle[6];
	int PuzzleProgress;
};
QuestS Quest;

#define BRIDGE_TRANS_MIN 10
#define BRIDGE_TRANS_MAX 90
#define BRIDGE_TRANS_DT  4
#define BRIDGE_TRANS_DELAY 10
int LightBridgeDT;
int LightBridgeDelay;


void GeneratePuzzle()
{
	// TODO: random generation?
	Quest.Puzzle[0] = 2;
	Quest.Puzzle[1] = 6;
	Quest.Puzzle[2] = 1;
	Quest.Puzzle[3] = 5;
	Quest.Puzzle[4] = 3;
	Quest.Puzzle[5] = 4;
}

void TransitionToZoomOut(float time)
{
	int mt = CameraTricks.MoveAndScaleCamera(0, 0, 0, Room.Width, Room.Height, time, eNoBlock);
	CameraTricks.FollowAspectRatio(0, 0, 0, Screen.Width, Screen.Height);
	while (!CameraTricks.IsDone(mt)) {
		Wait(1);
	}
	Wait(1);
	CameraTricks.UnfollowAspectRatio(0);
}

void TransitionToZoomIn(float time)
{
	int mt = CameraTricks.MoveAndScaleCamera(0, CAMERA1_DEFAULT_X, CAMERA_MIDDLE_Y, Screen.Width, Screen.Height, time, eNoBlock);
	CameraTricks.FollowAspectRatio(0, 0, 0, Screen.Width, Screen.Height);
	while (!CameraTricks.IsDone(mt)) {
		Wait(1);
	}
	Wait(1);
	CameraTricks.UnfollowAspectRatio(0);
}

void TransitionToSplitGeneric(bool zoom_in_to_chars, float time)
{
	int cam1_x, cam2_x;
	if (zoom_in_to_chars) {
		cam1_x = cBridgeChar.x - Screen.Width / 4;
		cam2_x = cBridgeChar2.x - Screen.Width / 4;
	} else {
		cam1_x = CAMERA1_DEFAULT_X;
		cam2_x = CAMERA2_DEFAULT_X;
	}
	int width = Screen.Width / 2 - SPLIT_VIEWPORT_MARGIN * 2;
	int height = Screen.Height - SPLIT_VIEWPORT_MARGIN * 2;
	int mt = CameraTricks.MoveAndScaleBoth(0, cam1_x + SPLIT_VIEWPORT_MARGIN, CAMERA_MIDDLE_Y + SPLIT_VIEWPORT_MARGIN, width, height,
		0, SPLIT_VIEWPORT_MARGIN, SPLIT_VIEWPORT_MARGIN, width, height, time, eNoBlock);
	int mt2 = CameraTricks.MoveAndScaleBoth(1, cam2_x + SPLIT_VIEWPORT_MARGIN, CAMERA_MIDDLE_Y + SPLIT_VIEWPORT_MARGIN, width, height,
		1, Screen.Width / 2 + SPLIT_VIEWPORT_MARGIN, SPLIT_VIEWPORT_MARGIN, width, height, time, eNoBlock);
	
	while (!CameraTricks.IsDone(mt) || !CameraTricks.IsDone(mt2)) {
		Wait(1);
	}
	Wait(1);
}

void TransitionToSplitCamera(bool zoom_in_to_chars, float time)
{
	Viewport2.Visible = true;
	Viewport2.SetPosition(Screen.Width - SPLIT_VIEWPORT_MARGIN, 0, 1, Screen.Height);
	Camera2.SetSize(1, Screen.Height);
	Camera2.SetAt(CAMERA2_DEFAULT_X + Screen.Width / 2, CAMERA_MIDDLE_Y);
	
	TransitionToSplitGeneric(zoom_in_to_chars, time);
}

void TransitionToSplitZoomOut(float time)
{
	int mt = CameraTricks.MoveAndScaleCamera(0, 0, 0, Room.Width / 2, Room.Height, time, eNoBlock);
	int mt2 = CameraTricks.MoveAndScaleCamera(1, Room.Width / 2, 0, Room.Width / 2, Room.Height, time, eNoBlock);
	CameraTricks.FollowAspectRatio(0, 0, 0, Screen.Width / 2, Screen.Height);
	CameraTricks.FollowAspectRatio(1, Screen.Width / 2, 0, Screen.Width / 2, Screen.Height);

	while (!CameraTricks.IsDone(mt) || !CameraTricks.IsDone(mt2)) {
		Wait(1);
	}
	Wait(1);
	CameraTricks.UnfollowAspectRatio(0);
	CameraTricks.UnfollowAspectRatio(1);
}

void TransitionToSplitZoomIn(bool zoom_in_to_chars, float time)
{
	int cam1_x, cam2_x;
	if (zoom_in_to_chars) {
		cam1_x = cBridgeChar.x - Screen.Width / 4;
		cam2_x = cBridgeChar2.x - Screen.Width / 4;
	} else {
		cam1_x = CAMERA1_DEFAULT_X;
		cam2_x = CAMERA2_DEFAULT_X;
	}
	int mt = CameraTricks.MoveAndScaleCamera(0, cam1_x, CAMERA_MIDDLE_Y, Screen.Width / 2, Screen.Height, time, eNoBlock);
	int mt2 = CameraTricks.MoveAndScaleCamera(1, cam2_x, CAMERA_MIDDLE_Y, Screen.Width / 2, Screen.Height, time, eNoBlock);
	CameraTricks.FollowAspectRatio(0, 0, 0, Screen.Width / 2, Screen.Height);
	CameraTricks.FollowAspectRatio(1, Screen.Width / 2, 0, Screen.Width / 2, Screen.Height);

	while (!CameraTricks.IsDone(mt) || !CameraTricks.IsDone(mt2)) {
		Wait(1);
	}
	Wait(1);
	CameraTricks.UnfollowAspectRatio(0);
	CameraTricks.UnfollowAspectRatio(1);
	
	TransitionToSplitGeneric(zoom_in_to_chars, 0.1);
}

void TransitionToMergedCamera(float time)
{
	int mt = CameraTricks.MoveAndScaleCamera(0, Game.Camera.X, CAMERA_MIDDLE_Y, Screen.Width / 2, Screen.Height, time, eNoBlock);
	int mt2 = CameraTricks.MoveAndScaleCamera(1, Camera2.X, CAMERA_MIDDLE_Y, Screen.Width / 2, Screen.Height, time, eNoBlock);
	CameraTricks.FollowAspectRatio(0, 0, 0, Screen.Width / 2, Screen.Height);
	CameraTricks.FollowAspectRatio(1, Screen.Width / 2, 0, Screen.Width / 2, Screen.Height);
	
	while (!CameraTricks.IsDone(mt) || !CameraTricks.IsDone(mt2)) {
		Wait(1);
	}
	Wait(1);
	CameraTricks.UnfollowAspectRatio(0);
	CameraTricks.UnfollowAspectRatio(1);

	Game.Camera.SetSize(Screen.Width, Screen.Height);
	Screen.Viewport.SetPosition(0, 0, Screen.Width, Screen.Height);
	Viewport2.Visible = false;
	Wait(1);
}

void TestIfNeedToIntroChar2()
{
	Quest.TimesUsedPanel1++;
	if (Quest.TimesUsedPanel1 > 3) {
		Display("After punching buttons for several minutes you come to realization that this does not lead to any progress.");
		TransitionToZoomOut(2.0);
		Utils.SpeechBox(cBridgeChar, "Alas, I am unable to make it work.");
		Utils.SpeechBox(cBridgeChar2, "Let's see if we can work on this togeher?");
		TransitionToZoomIn(2.0);
		TransitionToSplitCamera(false, 1.0);
		Quest.SecondCharacterIntro = true;
		
	}
}

void StartBridge()
{
	oLightBridge.Transparency = BRIDGE_TRANS_MAX;
	LightBridgeDT = -BRIDGE_TRANS_DT;
	LightBridgeDelay = BRIDGE_TRANS_DELAY;
	oLightBridge.Visible = true;
}

void PlayEnding()
{
	CameraTricks.UnfollowChar(0);
	CameraTricks.UnfollowChar(1);
	TransitionToMergedCamera(0.3);
	Utils.SpeechBox(cBridgeChar, "Well, hello there!");
	Utils.SpeechBox(cBridgeChar2, "It's so nice to finally meet with you!");
	Quest.CharactersJoined = true;
}

void UpdatePuzzleState()
{
	// display next
	if (Quest.PuzzleProgress < 6) {
		switch (Quest.Puzzle[Quest.PuzzleProgress]) {
		case 1: // left X
			oScreenLeft.Graphic = 29;
			oScreenRight.Graphic = 69;
			break;
		case 2: // left O
			oScreenLeft.Graphic = 29;
			oScreenRight.Graphic = 70;
			break;
		case 3: // left .
			oScreenLeft.Graphic = 29;
			oScreenRight.Graphic = 71;
			break;
		case 4: // right X
			oScreenLeft.Graphic = 31;
			oScreenRight.Graphic = 67;
			break;
		case 5: // right O
			oScreenLeft.Graphic = 32;
			oScreenRight.Graphic = 67;
			break;
		case 6: // right .
			oScreenLeft.Graphic = 33;
			oScreenRight.Graphic = 67;
			break;
		default:
			oScreenLeft.Graphic = 29;
			oScreenRight.Graphic = 67;
			break;
		}
	} else {
		oScreenLeft.Graphic = 29;
		oScreenRight.Graphic = 67;
	}
	// check for completion
	if (Quest.PuzzleProgress == 6) {
		Display("You hear a clicking noise, a buzzing, and the bridge machine finally comes to life.");
		StartBridge();
		TransitionToSplitZoomOut(3.0);
		Wait(40);
		Quest.BridgeEnabled = true;
		RestoreWalkableArea(2);
		Wait(60);
		TransitionToSplitZoomIn(true, 3.0);
		CameraTricks.FollowCharX(0, cBridgeChar);
		CameraTricks.FollowCharX(1, cBridgeChar2);
	}
}

void ResetPuzzleState()
{
	GeneratePuzzle();
	Quest.PuzzleProgress = 0;
	UpdatePuzzleState();
}

void PushPuzzleButton(int button_pressed)
{
	if (button_pressed != Quest.Puzzle[Quest.PuzzleProgress]) {
		// wrong
		oScreenLeft.Graphic = 30;
		oScreenRight.Graphic = 68;
		Wait(40);
		ResetPuzzleState();
		return;
	}
	// advance puzzle
	Quest.PuzzleProgress++;
	UpdatePuzzleState();
}

void PlayPushAction(Character *c, Object *o, int button_pressed)
{
	c.LockView(c.View);
	c.Animate(4, 1, eOnce, eNoBlock);
	Wait(10);
	o.Graphic += 1; // push/pop graphics are purposedly given sequential IDs
	Wait(40);
	c.UnlockView();
	o.Graphic -= 1;
	PushPuzzleButton(button_pressed);
}




function room_Load()
{
	cBridgeChar.ManualScaling = true;
	cBridgeChar.Scaling = 50;
	cBridgeChar2.ManualScaling = true;
	cBridgeChar2.Scaling = 50;
	cBridgeChar.x = -100;
	cBridgeChar.y = 648;
	cBridgeChar2.x = 2043;
	cBridgeChar2.y = 648;
	cBridgeChar2.FaceDirection(eDirectionLeft);
	
	RemoveWalkableArea(2);
	
	Game.Camera.SetAt(0, CAMERA_MIDDLE_Y);
	
	Camera2 = Camera.Create();
	Viewport2 = Viewport.Create();
	Viewport2.Camera = Camera2;
	Viewport2.Visible = false;
	
	gMenuButton.Visible = true;
	Utils.RestrictCursorsTo(eModePointer);
	
	ResetPuzzleState();
}

function room_Leave()
{
	gMenuButton.Visible = false;
	Viewport2.Delete();
	Camera2.Delete();
}

function room_AfterFadeIn()
{
	cBridgeChar.Walk(551, 648, eBlock, eAnywhere);
	Display("Upon arriving to the ravine, you find out that there's no way across.");
	Display("Then you notice there's someone else on the opposite side.");
	CameraTricks.MoveCamera(0, Room.Width - Screen.Width, CAMERA_MIDDLE_Y, 3.0, eBlock);
	TransitionToZoomOut(2.0);
	Utils.SpeechBox(cBridgeChar2, "Greetings to you, traveller. Are you also seeking to cross this gap?");
	Utils.SpeechBox(cBridgeChar, "Why, greetings to you too! Would you happen to know if there's any solution to our mutual problem?");
	Utils.SpeechBox(cBridgeChar2, "Do you see these devices on the both sides of ravine?\nI believe they control the light bridge mechanism.");
	Utils.SpeechBox(cBridgeChar, "Is that so? Let me try using one then.");
	TransitionToZoomIn(3.0);
}

function on_mouse_click(MouseButton button)
{
	if (button == eMouseLeft || button == eMouseRight) {
		if (GetLocationType(mouse.x, mouse.y) == eLocationNothing) {
			Viewport* view = Viewport.GetAtScreenXY(mouse.x, mouse.y);
			if (view != null) {
				Point* room_pt = Screen.ScreenToRoomPoint(mouse.x, mouse.y);
				if (view == Screen.Viewport) { // is primary or custom viewport?
					cBridgeChar.Walk(room_pt.x, room_pt.y);
				} else {
					cBridgeChar2.Walk(room_pt.x, room_pt.y);
				}
			}
		} else {
			Room.ProcessClick(mouse.x, mouse.y, eModeInteract);
		}
		ClaimEvent();
	}
}

function room_RepExec()
{
	if (Quest.BridgeEnabled && !Quest.CharactersJoined) {
		if (Game.Camera.X + Game.Camera.Width >= Camera2.X) {
			PlayEnding();
		}
	}
}

function repeatedly_execute_always()
{
	if (oLightBridge.Visible) {
		if (LightBridgeDelay > 0) {
			LightBridgeDelay--;
		} else {
			oLightBridge.Transparency += LightBridgeDT;
			if (oLightBridge.Transparency < BRIDGE_TRANS_MIN) {
				oLightBridge.Transparency = BRIDGE_TRANS_MIN;
				LightBridgeDT = BRIDGE_TRANS_DT;
			} else if (oLightBridge.Transparency > BRIDGE_TRANS_MAX) {
				oLightBridge.Transparency = BRIDGE_TRANS_MAX;
				LightBridgeDT = -BRIDGE_TRANS_DT;
			}
			LightBridgeDelay = BRIDGE_TRANS_DELAY;
		}
	}
}



#define COMP1_WALK_X 432
#define COMP1_WALK_Y 637
#define COMP2_WALK_X 2019
#define COMP2_WALK_Y 626

function hHotspot1_Interact()
{
}

function hHotspot2_Interact()
{
}

function oScreenLeft_Interact()
{
	if (Quest.BridgeEnabled) {
		return;
	}

	cBridgeChar.Walk(COMP1_WALK_X, COMP1_WALK_Y, eBlock);
	cBridgeChar.FaceDirection(eDirectionRight);
}

function oButLeftX_Interact()
{
	if (Quest.BridgeEnabled) {
		return;
	}

	cBridgeChar.Walk(COMP1_WALK_X, COMP1_WALK_Y, eBlock);
	cBridgeChar.FaceDirection(eDirectionRight);
	PlayPushAction(cBridgeChar, oButLeftX, 1);

	if (!Quest.SecondCharacterIntro) {
		TestIfNeedToIntroChar2();
	}
}

function oButLeftO_Interact()
{
	if (Quest.BridgeEnabled) {
		return;
	}

	cBridgeChar.Walk(COMP1_WALK_X, COMP1_WALK_Y, eBlock);
	cBridgeChar.FaceDirection(eDirectionRight);
	PlayPushAction(cBridgeChar, oButLeftO, 2);

	if (!Quest.SecondCharacterIntro) {
		TestIfNeedToIntroChar2();
	}
}

function oButLeftDot_Interact()
{
	if (Quest.BridgeEnabled) {
		return;
	}

	cBridgeChar.Walk(COMP1_WALK_X, COMP1_WALK_Y, eBlock);
	cBridgeChar.FaceDirection(eDirectionRight);
	PlayPushAction(cBridgeChar, oButLeftDot, 3);

	if (!Quest.SecondCharacterIntro) {
		TestIfNeedToIntroChar2();
	}
}

function oScreenRight_Interact()
{
	if (Quest.BridgeEnabled) {
		return;
	}

	cBridgeChar2.Walk(COMP2_WALK_X, COMP2_WALK_Y, eBlock);
	cBridgeChar2.FaceDirection(eDirectionRight);
}

function oButRightX_Interact()
{
	if (Quest.BridgeEnabled) {
		return;
	}

	cBridgeChar2.Walk(COMP2_WALK_X, COMP2_WALK_Y, eBlock);
	cBridgeChar2.FaceDirection(eDirectionRight);
	PlayPushAction(cBridgeChar2, oButRightX, 4);
}

function oButRightO_Interact()
{
	if (Quest.BridgeEnabled) {
		return;
	}

	cBridgeChar2.Walk(COMP2_WALK_X, COMP2_WALK_Y, eBlock);
	cBridgeChar2.FaceDirection(eDirectionRight);
	PlayPushAction(cBridgeChar2, oButRightO, 5);
}

function oButRightDot_Interact()
{
	if (Quest.BridgeEnabled) {
		return;
	}

	cBridgeChar2.Walk(COMP2_WALK_X, COMP2_WALK_Y, eBlock);
	cBridgeChar2.FaceDirection(eDirectionRight);
	PlayPushAction(cBridgeChar2, oButRightDot, 6);
}
