#define ROOM_VIEW_FACTOR_MIN 1.0
#define ROOM_VIEW_FACTOR_MAX 4.0
#define ROOM_VIEW_FACTOR_DEFAULT 2.0
#define ROOM_VIEW_FACTOR_STEP 0.1
float RoomViewFactor;
int RoomViewFactor_HintCounter;

Camera* LookCam;
Viewport* LookView;
#define CAM_WIDTH 32
#define CAM_HEIGHT 32
#define VIEW_X 20
#define VIEW_Y 20
#define VIEW_WIDTH 256
#define VIEW_HEIGHT 256

void UpdateRoomView()
{
	int width = FloatToInt(IntToFloat(Room.Width) * RoomViewFactor, eRoundDown);
	int height = FloatToInt(IntToFloat(Room.Height) * RoomViewFactor, eRoundDown);
	Screen.Viewport.SetPosition((Screen.Width - width) / 2, (Screen.Height - height) / 2, width, height);
	
	if (RoomViewFactor_HintCounter > 40) {
		lblHint.Text = "";
	}
}

void UpdateCameraLocation()
{
	Point* room_pt = Screen.Viewport.ScreenToRoomPoint(mouse.x, mouse.y, false);
	int x = room_pt.x - CAM_WIDTH / 2;
	int y = room_pt.y - CAM_HEIGHT / 2;
	if (x < Room.LeftEdge) {
		x = Room.LeftEdge;
	} else if (x + CAM_WIDTH >= Room.RightEdge) {
		x = Room.RightEdge - CAM_WIDTH;
	} if (y < Room.TopEdge) {
		y = Room.TopEdge;
	} else if (y + CAM_HEIGHT >= Room.BottomEdge) {
		y = Room.BottomEdge - CAM_HEIGHT;
	}

	LookCam.SetAt(x, y);
}

function room_Load()
{
	RoomViewFactor = ROOM_VIEW_FACTOR_DEFAULT;
	UpdateRoomView();
	
	LookCam = Camera.Create();
	LookCam.SetSize(CAM_WIDTH, CAM_HEIGHT);
	LookView = Viewport.Create();
	LookView.SetPosition(VIEW_X, VIEW_Y, VIEW_WIDTH, VIEW_HEIGHT);
	LookView.Camera = LookCam;
	UpdateCameraLocation();
	
	cTopDownGuy.z = -8; // ??? check again later
	
	gMenuButton.Visible = true;
	gZoomView.Visible = true;
	gHint.Visible = true;
	lblHint.Text = "Use mouse wheel to scale the room";

	Utils.RestrictCursorsTo(eModePointer);
}

function room_Leave()
{
	Utils.HideAllGUI();

	LookCam.Delete();
	LookView.Delete();
}

function room_AfterFadeIn()
{
}

function room_RepExec()
{
	if (IsGamePaused()) {
		return;
	}

	UpdateCameraLocation();
}

function on_mouse_click (MouseButton button)
{
	if (button == eMouseLeft) {
		Point* room_pt = Screen.Viewport.ScreenToRoomPoint(mouse.x, mouse.y, false);
		cTopDownGuy.Walk(room_pt.x, room_pt.y, eNoBlock);
	}
	if (button == eMouseWheelNorth) {
		RoomViewFactor += ROOM_VIEW_FACTOR_STEP;
		if (RoomViewFactor > ROOM_VIEW_FACTOR_MAX) {
			RoomViewFactor = ROOM_VIEW_FACTOR_MAX;
		}
		RoomViewFactor_HintCounter++;
		UpdateRoomView();
		ClaimEvent();
	} else if (button == eMouseWheelSouth) {
		RoomViewFactor -= ROOM_VIEW_FACTOR_STEP;
		if (RoomViewFactor < ROOM_VIEW_FACTOR_MIN) {
			RoomViewFactor = ROOM_VIEW_FACTOR_MIN;
		}
		RoomViewFactor_HintCounter++;
		UpdateRoomView();
		ClaimEvent();
	}
}
