struct Shot
{
	float x, y;
	float xoff, yoff;
	float vx, vy;
	int life;
	Object* obj;
};

#define MAX_SHOTS 20
Shot Shots[MAX_SHOTS];

ObjectPool ShotDataPool;
ObjectPool ShotObjPool;
ObjectPool EnemyPool;

#define MAX_SPAWNS 8
Object*    EnemySpawns[MAX_SPAWNS];

#define SHOT_SPRITE 18
#define SHOT_SPEED  1.2
#define SHOT_LIFE   3.0
#define SHOT_DELAY  0.3

int ShotDelay1;
int ShotDelay2;

#define TIMER_SPAWN 1

#define SPAWN_TIME  5


#define CAM_WIDTH   200
#define CAM_HEIGHT  200
#define VIEW_WIDTH  600
#define VIEW_HEIGHT 600

Viewport* TDViewport1;
Viewport* TDViewport2;
Camera* TDCamera1;
Camera* TDCamera2;


// TODO: move to CameraTricks
void Camera_FollowPlayer()
{
	TDCamera1.X = cTDPlayer1.x - TDCamera1.Width / 2;
	TDCamera1.Y = cTDPlayer1.y - TDCamera1.Height / 2;
	TDCamera2.X = cTDPlayer2.x - TDCamera2.Width / 2;
	TDCamera2.Y = cTDPlayer2.y - TDCamera2.Height / 2;
}

void SpawnEnemy(int x, int y)
{
	int enemy = EnemyPool.Acquire();
	if (enemy < 0) {
		return;
	}
	character[enemy].ChangeRoom(player.Room, x, y);
	character[enemy].ChangeView(VTOPDOWNALIEN);
	int follow_which = Random(1);
	if (follow_which == 0) {
		character[enemy].FollowCharacter(cTDPlayer1, 0, 0);
	} else {
		character[enemy].FollowCharacter(cTDPlayer2, 0, 0);
	}
	//Display("Spawned at %d, %d", character[enemy].x, character[enemy].y);
	character[enemy].z = -8; // ??? check again later
}

void DeleteEnemy(int enemy)
{
	character[enemy].FollowCharacter(null);
	character[enemy].StopMoving();
	character[enemy].ChangeRoom(-1);
	EnemyPool.Release(enemy);
}

void UpdateEnemySpawns()
{
	if (!IsTimerExpired(TIMER_SPAWN)) {
		return;
	}

	int spawn = Random(MAX_SPAWNS - 1);
	SpawnEnemy(EnemySpawns[spawn].X, EnemySpawns[spawn].Y - 10);
	SetTimer(TIMER_SPAWN, GetGameSpeed() * SPAWN_TIME);
}

void Shoot(Point* from, Point* to)
{
	// find spare data and game object (they should have same max quantity for simplicity sake)
	int shot = ShotDataPool.Acquire();
	if (shot < 0) {
		return;
	}
	int shot_obj = ShotObjPool.Acquire();

	// build vector
	float vx = IntToFloat(to.x - from.x);
	float vy = IntToFloat(to.y - from.y);
	// normalize
	float len = Maths.Sqrt(vx * vx + vy * vy);
	if (len != 0.0) {
		float n = 1.0 / len;
		vx *= n;
		vy *= n;
	} else {
		vx = 0.0;
		vy = 0.0;
	}
    // apply shot speed as new vector length
	vx *= SHOT_SPEED;
	vy *= SHOT_SPEED;

	// Assign new data
	Shots[shot].x = IntToFloat(from.x);
	Shots[shot].y = IntToFloat(from.y);
	Shots[shot].vx = vx;
	Shots[shot].vy = vy;
	int w = Game.SpriteWidth[SHOT_SPRITE];
	int h = Game.SpriteHeight[SHOT_SPRITE];
	Shots[shot].xoff = -IntToFloat(w / 2);
	Shots[shot].yoff = IntToFloat(h / 2);
	Shots[shot].obj = object[shot_obj];
	Shots[shot].obj.Graphic = SHOT_SPRITE;
	Shots[shot].obj.Visible = true;
	Shots[shot].obj.X = from.x;
	Shots[shot].obj.Y = from.y;
	Shots[shot].life = FloatToInt(SHOT_LIFE * IntToFloat(GetGameSpeed()), eRoundDown);
}

void DeleteShot(int shot)
{
	ShotObjPool.Release(Shots[shot].obj.ID);
	Shots[shot].obj.Visible = false;
	Shots[shot].obj = null;
	ShotDataPool.Release(shot);
}

void UpdateShots()
{
	if (ShotDelay1 > 0) {
		ShotDelay1--;
	}
	if (ShotDelay2 > 0) {
		ShotDelay2--;
	}

	for (int shot = 0; shot < MAX_SHOTS; shot++) {
		if (Shots[shot].obj == null) {
			continue; // no object
		}
		// deplete life
		Shots[shot].life--;
		if (Shots[shot].life <= 0) {
			// destroy shot
			DeleteShot(shot);
			continue;
		}
		// advance along the velocity vector
		Shots[shot].x += Shots[shot].vx;
		Shots[shot].y += Shots[shot].vy;
		// test collision with walls
		if (GetWalkableAreaAtRoom(FloatToInt(Shots[shot].x, eRoundNearest), FloatToInt(Shots[shot].y, eRoundNearest)) == 0) {
			// destroy shot
			DeleteShot(shot);
			continue;
		}
		// test collision with enemy
		bool deleted;
		for (int c = 6; c < 16; c++) {
			if (character[c].Room != player.Room) {
				continue;
			}
			if (AreThingsOverlapping(c, Shots[shot].obj.ID + 1000)) {
				DeleteShot(shot);
				DeleteEnemy(c);
				deleted = true;
				break;
			}
		}
		if (deleted) {
			continue;
		}
		// reposition game object to match new shot coordinates
		Shots[shot].obj.X = FloatToInt(Shots[shot].x + Shots[shot].xoff, eRoundNearest);
		Shots[shot].obj.Y = FloatToInt(Shots[shot].y + Shots[shot].yoff, eRoundNearest);
	}
}

function room_Load()
{
	ShotDataPool.AddObjects(0, MAX_SHOTS - 1);
	ShotObjPool.AddObjects(0, 19);
	EnemyPool.AddObjects(6, 15);

	for (int i = 0; i < MAX_SPAWNS; i++) {
		EnemySpawns[i] = object[i + 20];
	}

	TDViewport1 = Screen.Viewport;
	TDCamera1 = Game.Camera;
	TDViewport2 = Viewport.Create();
	TDCamera2 = Camera.Create();

	TDCamera1.SetSize(CAM_WIDTH, CAM_HEIGHT);
	TDViewport1.SetPosition((Screen.Width / 2 - VIEW_WIDTH) / 2, (Screen.Height - VIEW_HEIGHT) / 2, VIEW_WIDTH, VIEW_HEIGHT);
	TDViewport1.Camera = TDCamera1;
	TDCamera2.SetSize(CAM_WIDTH, CAM_HEIGHT);
	TDViewport2.SetPosition(Screen.Width / 2 + (Screen.Width / 2 - VIEW_WIDTH) / 2, (Screen.Height - VIEW_HEIGHT) / 2, VIEW_WIDTH, VIEW_HEIGHT);
	TDViewport2.Camera = TDCamera2;

	Camera_FollowPlayer();
	
	gTDView1.SetPosition(TDViewport1.X - 20, TDViewport1.Y - 20);
	gTDView2.SetPosition(TDViewport2.X - 20, TDViewport2.Y - 20);
	gTDView1.Visible = true;
	gTDView2.Visible = true;

	cTDPlayer1.x = 43;
	cTDPlayer1.y = 301;
	cTDPlayer1.z = -8; // ??? check again later
	cTDPlayer2.x = 935;
	cTDPlayer2.y = 301;
	cTDPlayer2.z = -8;

	gMenuButton.Visible = true;
	Utils.RestrictCursorsTo(eModePointer);
	KeyboardMovement.Char = cTDPlayer2;
	KeyboardMovement.Mode = eKeyboardMovementModePressing;
}

function room_Leave()
{
	KeyboardMovement.Mode = eKeyboardMovementModeNone;
	SetTimer(TIMER_SPAWN, 0);

	// Hide all enemy characters
	for (int i = 6; i <= 15; i++) {
		DeleteEnemy(i);
	}

	TDViewport2.Delete();
	TDCamera2.Delete();

	Utils.HideAllGUI();
}

function room_AfterFadeIn()
{
	Display("Controls:\nPlayer 1: mouse\n - LMB for move\n - RMB for shoot\n\nPlayer 2: keyboard\n - Arrow keys for move\n - Space for shoot");
	SetTimer(TIMER_SPAWN, GetGameSpeed() * SPAWN_TIME);
}

function room_RepExec()
{
	UpdateShots();
	UpdateEnemySpawns();
	
	if (IsKeyPressed(eKeySpace) && ShotDelay2 == 0) {
		cTDPlayer2.StopMoving();
		Point* char_pt = new Point;
		char_pt.x = cTDPlayer2.x;
		char_pt.y = cTDPlayer2.y;
		Point* to_pt = new Point;
		to_pt.x = char_pt.x;
		to_pt.y = char_pt.y;
		// TODO: move to Utils?
		switch (cTDPlayer2.Loop) {
			case eDirectionDown: to_pt.y += 1; break;
			case eDirectionDownLeft: to_pt.x += -1; to_pt.y += 1; break;
			case eDirectionDownRight: to_pt.x += 1; to_pt.y += 1; break;
			case eDirectionUp: to_pt.y += -1; break;
			case eDirectionUpLeft: to_pt.x += -1; to_pt.y += -1; break;
			case eDirectionUpRight: to_pt.x += 1; to_pt.y += -1; break;
			case eDirectionLeft: to_pt.x += -1; break;
			case eDirectionRight: to_pt.x += 1; break;
		}
		Shoot(char_pt, to_pt);
		ShotDelay2 = FloatToInt(SHOT_DELAY * IntToFloat(GetGameSpeed()), eRoundDown);
	}
}

function late_repeatedly_execute_always()
{
	Camera_FollowPlayer();
}

function on_key_press(eKeyCode key)
{
}

function on_mouse_click(MouseButton button)
{
	if (button == eMouseLeft) {
		Point* room_pt = TDViewport1.ScreenToRoomPoint(mouse.x, mouse.y, true);
		if (room_pt == null) {
			return; // clicked outside of player 1 viewport
		}
		cTDPlayer1.Walk(room_pt.x, room_pt.y, eNoBlock);
		ClaimEvent();
	} else if (button == eMouseRight && ShotDelay1 == 0) {
		Point* room_pt = TDViewport1.ScreenToRoomPoint(mouse.x, mouse.y, true);
		if (room_pt == null) {
			return; // clicked outside of player 1 viewport
		}
		cTDPlayer1.StopMoving();
		cTDPlayer1.FaceLocation(room_pt.x, room_pt.y);
		Point* char_pt = new Point;
		char_pt.x = cTDPlayer1.x;
		char_pt.y = cTDPlayer1.y;
		Shoot(char_pt, room_pt);
		ShotDelay1 = FloatToInt(SHOT_DELAY * IntToFloat(GetGameSpeed()), eRoundDown);
	}
}
